{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verify = exports.sign = exports.getKeyPairFromPublicKey = exports.getStarkKey = exports.getKeyPair = exports.genKeyPair = exports.ec = void 0;\n\nvar elliptic_1 = require(\"elliptic\");\n\nvar hash_js_1 = __importDefault(require(\"hash.js\"));\n\nvar minimalistic_assert_1 = __importDefault(require(\"minimalistic-assert\"));\n\nvar constants_1 = require(\"../constants\");\n\nvar encode_1 = require(\"./encode\");\n\nvar number_1 = require(\"./number\");\n\nexports.ec = new elliptic_1.ec(new elliptic_1.curves.PresetCurve({\n  type: 'short',\n  prime: null,\n  p: constants_1.FIELD_PRIME,\n  a: '00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001',\n  b: '06f21413 efbe40de 150e596d 72f7a8c5 609ad26c 15c915c1 f4cdfcb9 9cee9e89',\n  n: constants_1.EC_ORDER,\n  hash: hash_js_1.default.sha256,\n  gRed: false,\n  g: constants_1.CONSTANT_POINTS[1]\n}));\n/*\n The function _truncateToN in lib/elliptic/ec/index.js does a shift-right of 4 bits\n in some cases. This function does the opposite operation so that\n   _truncateToN(fixMessage(msg)) == msg.\n*/\n\nfunction fixMessage(msg) {\n  var pureHex = msg.replace(/^0x0*/, '');\n\n  if (pureHex.length <= 62) {\n    // In this case, pureHex should not be transformed, as the byteLength() is at most 31,\n    // so delta < 0 (see _truncateToN).\n    return pureHex;\n  }\n\n  (0, minimalistic_assert_1.default)(pureHex.length === 63); // In this case delta will be 4 so we perform a shift-left of 4 bits by adding a ZERO_BN.\n\n  return pureHex + \"0\";\n}\n\nexports.genKeyPair = exports.ec.genKeyPair.bind(exports.ec);\n\nfunction getKeyPair(pk) {\n  var pkBn = (0, number_1.toBN)(pk);\n  return exports.ec.keyFromPrivate((0, encode_1.removeHexPrefix)((0, number_1.toHex)(pkBn)), 'hex');\n}\n\nexports.getKeyPair = getKeyPair;\n\nfunction getStarkKey(keyPair) {\n  // this method needs to be run to generate the .pub property used below\n  // the result can be dumped\n  keyPair.getPublic(true, 'hex');\n  return (0, encode_1.addHexPrefix)((0, encode_1.sanitizeBytes)(keyPair.pub.getX().toString(16), 2));\n}\n\nexports.getStarkKey = getStarkKey;\n/**\n * Takes a public key and casts it into `elliptic` KeyPair format.\n *\n * @param publicKey - public key which should get casted to a KeyPair\n * @returns keyPair with public key only, which can be used to verify signatures, but cant sign anything\n */\n\nfunction getKeyPairFromPublicKey(publicKey) {\n  var publicKeyBn = (0, number_1.toBN)(publicKey);\n  return exports.ec.keyFromPublic((0, encode_1.removeHexPrefix)((0, number_1.toHex)(publicKeyBn)), 'hex');\n}\n\nexports.getKeyPairFromPublicKey = getKeyPairFromPublicKey;\n/*\n Signs a message using the provided key.\n key should be an KeyPair with a valid private key.\n Returns an Signature.\n*/\n\nfunction sign(keyPair, msgHash) {\n  var msgHashBN = (0, number_1.toBN)((0, encode_1.addHexPrefix)(msgHash)); // Verify message hash has valid length.\n\n  (0, number_1.assertInRange)(msgHashBN, constants_1.ZERO, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'msgHash');\n  var msgSignature = keyPair.sign(fixMessage(msgHash));\n  var r = msgSignature.r,\n      s = msgSignature.s;\n  var w = s.invm(exports.ec.n); // Verify signature has valid length.\n\n  (0, number_1.assertInRange)(r, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'r');\n  (0, number_1.assertInRange)(s, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.EC_ORDER)), 's');\n  (0, number_1.assertInRange)(w, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'w');\n  return [r.toString(), s.toString()];\n}\n\nexports.sign = sign;\n\nfunction chunkArray(arr, n) {\n  return Array(Math.ceil(arr.length / n)).fill('').map(function (_, i) {\n    return arr.slice(i * n, i * n + n);\n  });\n}\n/*\n   Verifies a message using the provided key.\n   key should be an KeyPair with a valid public key.\n   msgSignature should be an Signature.\n   Returns a boolean true if the verification succeeds.\n  */\n\n\nfunction verify(keyPair, msgHash, sig) {\n  var keyPairArray = Array.isArray(keyPair) ? keyPair : [keyPair];\n  var msgHashBN = (0, number_1.toBN)((0, encode_1.addHexPrefix)(msgHash));\n  (0, minimalistic_assert_1.default)(sig.length % 2 === 0, 'Signature must be an array of length dividable by 2');\n  (0, number_1.assertInRange)(msgHashBN, constants_1.ZERO, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'msgHash');\n  (0, minimalistic_assert_1.default)(keyPairArray.length === sig.length / 2, 'Signature and keyPair length must be equal');\n  return chunkArray(sig, 2).every(function (_a, i) {\n    var _b;\n\n    var _c = __read(_a, 2),\n        r = _c[0],\n        s = _c[1];\n\n    var rBN = (0, number_1.toBN)(r);\n    var sBN = (0, number_1.toBN)(s);\n    var w = sBN.invm(exports.ec.n);\n    (0, number_1.assertInRange)(rBN, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'r');\n    (0, number_1.assertInRange)(sBN, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.EC_ORDER)), 's');\n    (0, number_1.assertInRange)(w, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'w');\n    return (_b = exports.ec.verify(fixMessage(msgHash), {\n      r: rBN,\n      s: sBN\n    }, keyPairArray[i])) !== null && _b !== void 0 ? _b : false;\n  });\n}\n\nexports.verify = verify;","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__importDefault","mod","__esModule","Object","defineProperty","exports","verify","sign","getKeyPairFromPublicKey","getStarkKey","getKeyPair","genKeyPair","ec","elliptic_1","require","hash_js_1","minimalistic_assert_1","constants_1","encode_1","number_1","curves","PresetCurve","type","prime","p","FIELD_PRIME","a","b","EC_ORDER","hash","default","sha256","gRed","g","CONSTANT_POINTS","fixMessage","msg","pureHex","replace","length","bind","pk","pkBn","toBN","keyFromPrivate","removeHexPrefix","toHex","keyPair","getPublic","addHexPrefix","sanitizeBytes","pub","getX","toString","publicKey","publicKeyBn","keyFromPublic","msgHash","msgHashBN","assertInRange","ZERO","MAX_ECDSA_VAL","msgSignature","s","w","invm","ONE","chunkArray","arr","Array","Math","ceil","fill","map","_","slice","sig","keyPairArray","isArray","every","_a","_b","_c","rBN","sBN"],"sources":["/Users/marijoradman/y22/miami6/miami-hackathon-starknet-p2e/node_modules/starknet/dist/utils/ellipticCurve.js"],"sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verify = exports.sign = exports.getKeyPairFromPublicKey = exports.getStarkKey = exports.getKeyPair = exports.genKeyPair = exports.ec = void 0;\nvar elliptic_1 = require(\"elliptic\");\nvar hash_js_1 = __importDefault(require(\"hash.js\"));\nvar minimalistic_assert_1 = __importDefault(require(\"minimalistic-assert\"));\nvar constants_1 = require(\"../constants\");\nvar encode_1 = require(\"./encode\");\nvar number_1 = require(\"./number\");\nexports.ec = new elliptic_1.ec(new elliptic_1.curves.PresetCurve({\n    type: 'short',\n    prime: null,\n    p: constants_1.FIELD_PRIME,\n    a: '00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001',\n    b: '06f21413 efbe40de 150e596d 72f7a8c5 609ad26c 15c915c1 f4cdfcb9 9cee9e89',\n    n: constants_1.EC_ORDER,\n    hash: hash_js_1.default.sha256,\n    gRed: false,\n    g: constants_1.CONSTANT_POINTS[1],\n}));\n/*\n The function _truncateToN in lib/elliptic/ec/index.js does a shift-right of 4 bits\n in some cases. This function does the opposite operation so that\n   _truncateToN(fixMessage(msg)) == msg.\n*/\nfunction fixMessage(msg) {\n    var pureHex = msg.replace(/^0x0*/, '');\n    if (pureHex.length <= 62) {\n        // In this case, pureHex should not be transformed, as the byteLength() is at most 31,\n        // so delta < 0 (see _truncateToN).\n        return pureHex;\n    }\n    (0, minimalistic_assert_1.default)(pureHex.length === 63);\n    // In this case delta will be 4 so we perform a shift-left of 4 bits by adding a ZERO_BN.\n    return pureHex + \"0\";\n}\nexports.genKeyPair = exports.ec.genKeyPair.bind(exports.ec);\nfunction getKeyPair(pk) {\n    var pkBn = (0, number_1.toBN)(pk);\n    return exports.ec.keyFromPrivate((0, encode_1.removeHexPrefix)((0, number_1.toHex)(pkBn)), 'hex');\n}\nexports.getKeyPair = getKeyPair;\nfunction getStarkKey(keyPair) {\n    // this method needs to be run to generate the .pub property used below\n    // the result can be dumped\n    keyPair.getPublic(true, 'hex');\n    return (0, encode_1.addHexPrefix)((0, encode_1.sanitizeBytes)(keyPair.pub.getX().toString(16), 2));\n}\nexports.getStarkKey = getStarkKey;\n/**\n * Takes a public key and casts it into `elliptic` KeyPair format.\n *\n * @param publicKey - public key which should get casted to a KeyPair\n * @returns keyPair with public key only, which can be used to verify signatures, but cant sign anything\n */\nfunction getKeyPairFromPublicKey(publicKey) {\n    var publicKeyBn = (0, number_1.toBN)(publicKey);\n    return exports.ec.keyFromPublic((0, encode_1.removeHexPrefix)((0, number_1.toHex)(publicKeyBn)), 'hex');\n}\nexports.getKeyPairFromPublicKey = getKeyPairFromPublicKey;\n/*\n Signs a message using the provided key.\n key should be an KeyPair with a valid private key.\n Returns an Signature.\n*/\nfunction sign(keyPair, msgHash) {\n    var msgHashBN = (0, number_1.toBN)((0, encode_1.addHexPrefix)(msgHash));\n    // Verify message hash has valid length.\n    (0, number_1.assertInRange)(msgHashBN, constants_1.ZERO, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'msgHash');\n    var msgSignature = keyPair.sign(fixMessage(msgHash));\n    var r = msgSignature.r, s = msgSignature.s;\n    var w = s.invm(exports.ec.n);\n    // Verify signature has valid length.\n    (0, number_1.assertInRange)(r, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'r');\n    (0, number_1.assertInRange)(s, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.EC_ORDER)), 's');\n    (0, number_1.assertInRange)(w, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'w');\n    return [r.toString(), s.toString()];\n}\nexports.sign = sign;\nfunction chunkArray(arr, n) {\n    return Array(Math.ceil(arr.length / n))\n        .fill('')\n        .map(function (_, i) { return arr.slice(i * n, i * n + n); });\n}\n/*\n   Verifies a message using the provided key.\n   key should be an KeyPair with a valid public key.\n   msgSignature should be an Signature.\n   Returns a boolean true if the verification succeeds.\n  */\nfunction verify(keyPair, msgHash, sig) {\n    var keyPairArray = Array.isArray(keyPair) ? keyPair : [keyPair];\n    var msgHashBN = (0, number_1.toBN)((0, encode_1.addHexPrefix)(msgHash));\n    (0, minimalistic_assert_1.default)(sig.length % 2 === 0, 'Signature must be an array of length dividable by 2');\n    (0, number_1.assertInRange)(msgHashBN, constants_1.ZERO, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'msgHash');\n    (0, minimalistic_assert_1.default)(keyPairArray.length === sig.length / 2, 'Signature and keyPair length must be equal');\n    return chunkArray(sig, 2).every(function (_a, i) {\n        var _b;\n        var _c = __read(_a, 2), r = _c[0], s = _c[1];\n        var rBN = (0, number_1.toBN)(r);\n        var sBN = (0, number_1.toBN)(s);\n        var w = sBN.invm(exports.ec.n);\n        (0, number_1.assertInRange)(rBN, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'r');\n        (0, number_1.assertInRange)(sBN, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.EC_ORDER)), 's');\n        (0, number_1.assertInRange)(w, constants_1.ONE, (0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.MAX_ECDSA_VAL)), 'w');\n        return (_b = exports.ec.verify(fixMessage(msgHash), { r: rBN, s: sBN }, keyPairArray[i])) !== null && _b !== void 0 ? _b : false;\n    });\n}\nexports.verify = verify;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}