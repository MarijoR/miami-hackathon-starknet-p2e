{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { decodeTxInfo } from \"./utils\";\nimport ledgerService from \"./services/ledger\";\nimport { EthAppNftNotSupported, EthAppPleaseEnableContractData } from \"./errors\";\nvar starkQuantizationTypeMap = {\n  eth: 1,\n  erc20: 2,\n  erc721: 3,\n  erc20mintable: 4,\n  erc721mintable: 5\n};\n\nfunction splitPath(path) {\n  var result = [];\n  var components = path.split(\"/\");\n  components.forEach(function (element) {\n    var number = parseInt(element, 10);\n\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n\n    result.push(number);\n  });\n  return result;\n}\n\nfunction hexBuffer(str) {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nfunction maybeHexBuffer(str) {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nvar remapTransactionRelatedErrors = function (e) {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\"Please enable Blind signing or Contract data in the Ethereum app Settings\");\n  }\n\n  return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\n\nvar Eth =\n/** @class */\nfunction () {\n  function Eth(transport, scrambleKey, loadConfig) {\n    if (scrambleKey === void 0) {\n      scrambleKey = \"w0w\";\n    }\n\n    if (loadConfig === void 0) {\n      loadConfig = {};\n    }\n\n    this.transport = transport;\n    this.loadConfig = loadConfig;\n    transport.decorateAppAPIMethods(this, [\"getAddress\", \"provideERC20TokenInformation\", \"signTransaction\", \"signPersonalMessage\", \"getAppConfiguration\", \"signEIP712HashedMessage\", \"starkGetPublicKey\", \"starkSignOrder\", \"starkSignOrder_v2\", \"starkSignTransfer\", \"starkSignTransfer_v2\", \"starkProvideQuantum\", \"starkProvideQuantum_v2\", \"starkUnsafeSign\", \"eth2GetPublicKey\", \"eth2SetWithdrawalIndex\", \"setExternalPlugin\", \"setPlugin\", \"getEIP1024PublicEncryptionKey\", \"getEIP1024SharedSecret\"], scrambleKey);\n  }\n\n  Eth.prototype.setLoadConfig = function (loadConfig) {\n    this.loadConfig = loadConfig;\n  };\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n\n\n  Eth.prototype.getAddress = function (path, boolDisplay, boolChaincode) {\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(function (response) {\n      var publicKeyLength = response[0];\n      var addressLength = response[1 + publicKeyLength];\n      return {\n        publicKey: response.slice(1, 1 + publicKeyLength).toString(\"hex\"),\n        address: \"0x\" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString(\"ascii\"),\n        chainCode: boolChaincode ? response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString(\"hex\") : undefined\n      };\n    });\n  };\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign.\n   *\n   * @param path: the BIP32 path to sign the transaction on\n   * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign\n   * @param resolution: resolution is an object with all \"resolved\" metadata necessary to allow the device to clear sign information. This includes: ERC20 token information, plugins, contracts, NFT signatures,... You must explicitly provide something to avoid having a warning. By default, you can use Ledger's service or your own resolution service. See services/types.js for the contract. Setting the value to \"null\" will fallback everything to blind signing but will still allow the device to sign the transaction.\n   * @example\n   import ledgerService from \"@ledgerhq/hw-app-eth/lib/services/ledger\"\n   const tx = \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\"; // raw tx to sign\n   const resolution = await ledgerService.resolveTransaction(tx);\n   const result = eth.signTransaction(\"44'/60'/0'/0/0\", tx, resolution);\n   console.log(result);\n   */\n\n\n  Eth.prototype.signTransaction = function (path, rawTxHex, resolution) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, plugin, e_1_1, _c, _d, _e, payload, signature, e_2_1, _f, _g, nft, e_3_1, _h, _j, data, e_4_1, rawTx, _k, vrsOffset, txType, chainId, chainIdTruncated, paths, response, offset, _loop_1, this_1, response_byte, v, oneByteChainId, ecc_parity, r, s;\n\n      var e_1, _l, e_2, _m, e_3, _o, e_4, _p;\n\n      return __generator(this, function (_q) {\n        switch (_q.label) {\n          case 0:\n            if (!(resolution === undefined)) return [3\n            /*break*/\n            , 2];\n            console.warn(\"hw-app-eth: signTransaction(path, rawTxHex, resolution): \" + \"please provide the 'resolution' parameter. \" + \"See https://github.com/LedgerHQ/ledgerjs/blob/master/packages/hw-app-eth/README.md \" + \"â€“ the previous signature is deprecated and providing the 3rd 'resolution' parameter explicitly will become mandatory so you have the control on the resolution and the fallback mecanism (e.g. fallback to blind signing or not).\" + \"// Possible solution:\\n\" + \" + import ledgerService from '@ledgerhq/hw-app-eth/lib/services/ledger';\\n\" + \" + const resolution = await ledgerService.resolveTransaction(rawTxHex);\");\n            return [4\n            /*yield*/\n            , ledgerService.resolveTransaction(rawTxHex, this.loadConfig, {\n              externalPlugins: true,\n              erc20: true\n            })[\"catch\"](function (e) {\n              console.warn(\"an error occurred in resolveTransaction => fallback to blind signing: \" + String(e));\n              return null;\n            })];\n\n          case 1:\n            resolution = _q.sent();\n            _q.label = 2;\n\n          case 2:\n            if (!resolution) return [3\n            /*break*/\n            , 31];\n            _q.label = 3;\n\n          case 3:\n            _q.trys.push([3, 8, 9, 10]);\n\n            _a = __values(resolution.plugin), _b = _a.next();\n            _q.label = 4;\n\n          case 4:\n            if (!!_b.done) return [3\n            /*break*/\n            , 7];\n            plugin = _b.value;\n            return [4\n            /*yield*/\n            , setPlugin(this.transport, plugin)];\n\n          case 5:\n            _q.sent();\n\n            _q.label = 6;\n\n          case 6:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 4];\n\n          case 7:\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            e_1_1 = _q.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            try {\n              if (_b && !_b.done && (_l = _a[\"return\"])) _l.call(_a);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 10:\n            _q.trys.push([10, 15, 16, 17]);\n\n            _c = __values(resolution.externalPlugin), _d = _c.next();\n            _q.label = 11;\n\n          case 11:\n            if (!!_d.done) return [3\n            /*break*/\n            , 14];\n            _e = _d.value, payload = _e.payload, signature = _e.signature;\n            return [4\n            /*yield*/\n            , setExternalPlugin(this.transport, payload, signature)];\n\n          case 12:\n            _q.sent();\n\n            _q.label = 13;\n\n          case 13:\n            _d = _c.next();\n            return [3\n            /*break*/\n            , 11];\n\n          case 14:\n            return [3\n            /*break*/\n            , 17];\n\n          case 15:\n            e_2_1 = _q.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 17];\n\n          case 16:\n            try {\n              if (_d && !_d.done && (_m = _c[\"return\"])) _m.call(_c);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            _q.trys.push([17, 22, 23, 24]);\n\n            _f = __values(resolution.nfts), _g = _f.next();\n            _q.label = 18;\n\n          case 18:\n            if (!!_g.done) return [3\n            /*break*/\n            , 21];\n            nft = _g.value;\n            return [4\n            /*yield*/\n            , provideNFTInformation(this.transport, Buffer.from(nft, \"hex\"))];\n\n          case 19:\n            _q.sent();\n\n            _q.label = 20;\n\n          case 20:\n            _g = _f.next();\n            return [3\n            /*break*/\n            , 18];\n\n          case 21:\n            return [3\n            /*break*/\n            , 24];\n\n          case 22:\n            e_3_1 = _q.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 24];\n\n          case 23:\n            try {\n              if (_g && !_g.done && (_o = _f[\"return\"])) _o.call(_f);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 24:\n            _q.trys.push([24, 29, 30, 31]);\n\n            _h = __values(resolution.erc20Tokens), _j = _h.next();\n            _q.label = 25;\n\n          case 25:\n            if (!!_j.done) return [3\n            /*break*/\n            , 28];\n            data = _j.value;\n            return [4\n            /*yield*/\n            , provideERC20TokenInformation(this.transport, Buffer.from(data, \"hex\"))];\n\n          case 26:\n            _q.sent();\n\n            _q.label = 27;\n\n          case 27:\n            _j = _h.next();\n            return [3\n            /*break*/\n            , 25];\n\n          case 28:\n            return [3\n            /*break*/\n            , 31];\n\n          case 29:\n            e_4_1 = _q.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 31];\n\n          case 30:\n            try {\n              if (_j && !_j.done && (_p = _h[\"return\"])) _p.call(_h);\n            } finally {\n              if (e_4) throw e_4.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 31:\n            rawTx = Buffer.from(rawTxHex, \"hex\");\n            _k = decodeTxInfo(rawTx), vrsOffset = _k.vrsOffset, txType = _k.txType, chainId = _k.chainId, chainIdTruncated = _k.chainIdTruncated;\n            paths = splitPath(path);\n            offset = 0;\n\n            _loop_1 = function () {\n              var first, maxChunkSize, chunkSize, buffer;\n              return __generator(this, function (_r) {\n                switch (_r.label) {\n                  case 0:\n                    first = offset === 0;\n                    maxChunkSize = first ? 150 - 1 - paths.length * 4 : 150;\n                    chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;\n\n                    if (vrsOffset != 0 && offset + chunkSize >= vrsOffset) {\n                      // Make sure that the chunk doesn't end right on the EIP 155 marker if set\n                      chunkSize = rawTx.length - offset;\n                    }\n\n                    buffer = Buffer.alloc(first ? 1 + paths.length * 4 + chunkSize : chunkSize);\n\n                    if (first) {\n                      buffer[0] = paths.length;\n                      paths.forEach(function (element, index) {\n                        buffer.writeUInt32BE(element, 1 + 4 * index);\n                      });\n                      rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n                    } else {\n                      rawTx.copy(buffer, 0, offset, offset + chunkSize);\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this_1.transport.send(0xe0, 0x04, first ? 0x00 : 0x80, 0x00, buffer)[\"catch\"](function (e) {\n                      throw remapTransactionRelatedErrors(e);\n                    })];\n\n                  case 1:\n                    response = _r.sent();\n                    offset += chunkSize;\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _q.label = 32;\n\n          case 32:\n            if (!(offset !== rawTx.length)) return [3\n            /*break*/\n            , 34];\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 33:\n            _q.sent();\n\n            return [3\n            /*break*/\n            , 32];\n\n          case 34:\n            response_byte = response[0];\n            v = \"\";\n\n            if (chainId.times(2).plus(35).plus(1).isGreaterThan(255)) {\n              oneByteChainId = (chainIdTruncated * 2 + 35) % 256;\n              ecc_parity = Math.abs(response_byte - oneByteChainId);\n\n              if (txType != null) {\n                // For EIP2930 and EIP1559 tx, v is simply the parity.\n                v = ecc_parity % 2 == 1 ? \"00\" : \"01\";\n              } else {\n                // Legacy type transaction with a big chain ID\n                v = chainId.times(2).plus(35).plus(ecc_parity).toString(16);\n              }\n            } else {\n              v = response_byte.toString(16);\n            } // Make sure v has is prefixed with a 0 if its length is odd (\"1\" -> \"01\").\n\n\n            if (v.length % 2 == 1) {\n              v = \"0\" + v;\n            }\n\n            r = response.slice(1, 1 + 32).toString(\"hex\");\n            s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n            return [2\n            /*return*/\n            , {\n              v: v,\n              r: r,\n              s: s\n            }];\n        }\n      });\n    });\n  };\n  /**\n   */\n\n\n  Eth.prototype.getAppConfiguration = function () {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(function (response) {\n      return {\n        arbitraryDataEnabled: response[0] & 0x01,\n        erc20ProvisioningNecessary: response[0] & 0x02,\n        starkEnabled: response[0] & 0x04,\n        starkv2Supported: response[0] & 0x08,\n        version: \"\" + response[1] + \".\" + response[2] + \".\" + response[3]\n      };\n    });\n  };\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  Eth.prototype.signPersonalMessage = function (path, messageHex) {\n    return __awaiter(this, void 0, void 0, function () {\n      var paths, offset, message, response, _loop_2, this_2, v, r, s;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            paths = splitPath(path);\n            offset = 0;\n            message = Buffer.from(messageHex, \"hex\");\n\n            _loop_2 = function () {\n              var maxChunkSize, chunkSize, buffer;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n                    chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;\n                    buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n\n                    if (offset === 0) {\n                      buffer[0] = paths.length;\n                      paths.forEach(function (element, index) {\n                        buffer.writeUInt32BE(element, 1 + 4 * index);\n                      });\n                      buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n                      message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n                    } else {\n                      message.copy(buffer, 0, offset, offset + chunkSize);\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this_2.transport.send(0xe0, 0x08, offset === 0 ? 0x00 : 0x80, 0x00, buffer)];\n\n                  case 1:\n                    response = _b.sent();\n                    offset += chunkSize;\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_2 = this;\n            _a.label = 1;\n\n          case 1:\n            if (!(offset !== message.length)) return [3\n            /*break*/\n            , 3];\n            return [5\n            /*yield**/\n            , _loop_2()];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 1];\n\n          case 3:\n            v = response[0];\n            r = response.slice(1, 1 + 32).toString(\"hex\");\n            s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n            return [2\n            /*return*/\n            , {\n              v: v,\n              r: r,\n              s: s\n            }];\n        }\n      });\n    });\n  };\n  /**\n  * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n  * @example\n  eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n\n\n  Eth.prototype.signEIP712HashedMessage = function (path, domainSeparatorHex, hashStructMessageHex) {\n    var domainSeparator = hexBuffer(domainSeparatorHex);\n    var hashStruct = hexBuffer(hashStructMessageHex);\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);\n    var offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    domainSeparator.copy(buffer, offset);\n    offset += 32;\n    hashStruct.copy(buffer, offset);\n    return this.transport.send(0xe0, 0x0c, 0x00, 0x00, buffer).then(function (response) {\n      var v = response[0];\n      var r = response.slice(1, 1 + 32).toString(\"hex\");\n      var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        v: v,\n        r: r,\n        s: s\n      };\n    });\n  };\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n\n\n  Eth.prototype.starkGetPublicKey = function (path, boolDisplay) {\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(function (response) {\n      return response.slice(0, response.length - 2);\n    });\n  };\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  Eth.prototype.starkSignOrder = function (path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    var sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    var destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    var offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x01, 0x00, buffer).then(function (response) {\n      var r = response.slice(1, 1 + 32).toString(\"hex\");\n      var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r: r,\n        s: s\n      };\n    });\n  };\n  /**\n   * sign a Stark order using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantizationType quantization type used for the source token\n   * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)\n   * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantizationType quantization type used for the destination token\n   * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)\n   * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  Eth.prototype.starkSignOrder_v2 = function (path, sourceTokenAddress, sourceQuantizationType, sourceQuantization, sourceMintableBlobOrTokenId, destinationTokenAddress, destinationQuantizationType, destinationQuantization, destinationMintableBlobOrTokenId, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n    var sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    var destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n\n    if (!(sourceQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignOrderv2 invalid source quantization type=\" + sourceQuantizationType);\n    }\n\n    if (!(destinationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignOrderv2 invalid destination quantization type=\" + destinationQuantizationType);\n    }\n\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 1 + 20 + 32 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n    var offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[sourceQuantizationType];\n    offset++;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (sourceQuantization) {\n      Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (sourceMintableBlobOrTokenId) {\n      Buffer.from(sourceMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer[offset] = starkQuantizationTypeMap[destinationQuantizationType];\n    offset++;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (destinationQuantization) {\n      Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (destinationMintableBlobOrTokenId) {\n      Buffer.from(destinationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x03, 0x00, buffer).then(function (response) {\n      var r = response.slice(1, 1 + 32).toString(\"hex\");\n      var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r: r,\n        s: s\n      };\n    });\n  };\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n\n\n  Eth.prototype.starkSignTransfer = function (path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {\n    var transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    var targetPublicKeyHex = hexBuffer(targetPublicKey);\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);\n    var offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport.send(0xf0, 0x04, 0x02, 0x00, buffer).then(function (response) {\n      var r = response.slice(1, 1 + 32).toString(\"hex\");\n      var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r: r,\n        s: s\n      };\n    });\n  };\n  /**\n   * sign a Stark transfer or conditional transfer using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantizationType quantization type used for the token to be transferred\n   * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @option conditionalTransferAddress onchain address of the condition for a conditional transfer\n   * @option conditionalTransferFact fact associated to the condition for a conditional transfer\n   * @return the signature\n   */\n\n\n  Eth.prototype.starkSignTransfer_v2 = function (path, transferTokenAddress, transferQuantizationType, transferQuantization, transferMintableBlobOrTokenId, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp, conditionalTransferAddress, conditionalTransferFact) {\n    var transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    var targetPublicKeyHex = hexBuffer(targetPublicKey);\n    var conditionalTransferAddressHex = maybeHexBuffer(conditionalTransferAddress);\n\n    if (!(transferQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkSignTransferv2 invalid quantization type=\" + transferQuantizationType);\n    }\n\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4 + 1 + 20 + 32 + 32 + 32 + 4 + 4 + 8 + 4 + 4 + (conditionalTransferAddressHex ? 32 + 20 : 0), 0);\n    var offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[transferQuantizationType];\n    offset++;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (transferQuantization) {\n      Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (transferMintableBlobOrTokenId) {\n      Buffer.from(transferMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n\n    if (conditionalTransferAddressHex && conditionalTransferFact) {\n      offset += 4;\n      Buffer.from(conditionalTransferFact.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n      offset += 32;\n      conditionalTransferAddressHex.copy(buffer, offset);\n    }\n\n    return this.transport.send(0xf0, 0x04, conditionalTransferAddressHex ? 0x05 : 0x04, 0x00, buffer).then(function (response) {\n      var r = response.slice(1, 1 + 32).toString(\"hex\");\n      var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r: r,\n        s: s\n      };\n    });\n  };\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n\n\n  Eth.prototype.starkProvideQuantum = function (operationContract, operationQuantization) {\n    var operationContractHex = maybeHexBuffer(operationContract);\n    var buffer = Buffer.alloc(20 + 32, 0);\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n\n    Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(function () {\n      return true;\n    }, function (e) {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  };\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantizationType quantization type of the token to be transferred\n   * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred\n   */\n\n\n  Eth.prototype.starkProvideQuantum_v2 = function (operationContract, operationQuantizationType, operationQuantization, operationMintableBlobOrTokenId) {\n    var operationContractHex = maybeHexBuffer(operationContract);\n\n    if (!(operationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\"eth.starkProvideQuantumV2 invalid quantization type=\" + operationQuantizationType);\n    }\n\n    var buffer = Buffer.alloc(20 + 32 + 32, 0);\n    var offset = 0;\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (operationQuantization) {\n      Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (operationMintableBlobOrTokenId) {\n      Buffer.from(operationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n    }\n\n    return this.transport.send(0xf0, 0x08, starkQuantizationTypeMap[operationQuantizationType], 0x00, buffer).then(function () {\n      return true;\n    }, function (e) {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting Stark extensions\n        return false;\n      }\n\n      throw e;\n    });\n  };\n  /**\n   * sign the given hash over the Stark curve\n   * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.\n   * @param path a path in BIP 32 format\n   * @param hash hexadecimal hash to sign\n   * @return the signature\n   */\n\n\n  Eth.prototype.starkUnsafeSign = function (path, hash) {\n    var hashHex = hexBuffer(hash);\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    var offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    hashHex.copy(buffer, offset);\n    return this.transport.send(0xf0, 0x0a, 0x00, 0x00, buffer).then(function (response) {\n      var r = response.slice(1, 1 + 32).toString(\"hex\");\n      var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n      return {\n        r: r,\n        s: s\n      };\n    });\n  };\n  /**\n   * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.eth2GetPublicKey(\"12381/3600/0/0\").then(o => o.publicKey)\n   */\n\n\n  Eth.prototype.eth2GetPublicKey = function (path, boolDisplay) {\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x0e, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(function (response) {\n      return {\n        publicKey: response.slice(0, -2).toString(\"hex\")\n      };\n    });\n  };\n  /**\n   * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature\n   *\n   * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0\n   *\n   * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0\n   * @return True if the method was executed successfully\n   */\n\n\n  Eth.prototype.eth2SetWithdrawalIndex = function (withdrawalIndex) {\n    var buffer = Buffer.alloc(4, 0);\n    buffer.writeUInt32BE(withdrawalIndex, 0);\n    return this.transport.send(0xe0, 0x10, 0x00, 0x00, buffer).then(function () {\n      return true;\n    }, function (e) {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for ETH application versions not supporting ETH 2\n        return false;\n      }\n\n      throw e;\n    });\n  };\n  /**\n   * get a public encryption key on Curve25519 according to EIP 1024\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.getEIP1024PublicEncryptionKey(\"44'/60'/0'/0/0\").then(o => o.publicKey)\n   */\n\n\n  Eth.prototype.getEIP1024PublicEncryptionKey = function (path, boolDisplay) {\n    var paths = splitPath(path);\n    var buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport.send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x00, buffer).then(function (response) {\n      return {\n        publicKey: response.slice(0, -2).toString(\"hex\")\n      };\n    });\n  };\n  /**\n   * get a shared secret on Curve25519 according to EIP 1024\n   * @param path a path in BIP 32 format\n   * @param remotePublicKeyHex remote Curve25519 public key\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a shared secret\n   * @example\n   * eth.getEIP1024SharedSecret(\"44'/60'/0'/0/0\", \"87020e80af6e07a6e4697f091eacadb9e7e6629cb7e5a8a371689a3ed53b3d64\").then(o => o.sharedSecret)\n   */\n\n\n  Eth.prototype.getEIP1024SharedSecret = function (path, remotePublicKeyHex, boolDisplay) {\n    var paths = splitPath(path);\n    var remotePublicKey = hexBuffer(remotePublicKeyHex);\n    var buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    var offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach(function (element, index) {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    remotePublicKey.copy(buffer, offset);\n    return this.transport.send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x01, buffer).then(function (response) {\n      return {\n        sharedSecret: response.slice(0, -2).toString(\"hex\")\n      };\n    });\n  };\n\n  Eth.prototype.provideERC20TokenInformation = function (_a) {\n    var data = _a.data;\n    console.warn(\"hw-app-eth: eth.provideERC20TokenInformation is deprecated. signTransaction solves this for you when providing it in `resolution`.\");\n    return provideERC20TokenInformation(this.transport, data);\n  };\n\n  Eth.prototype.setExternalPlugin = function (pluginName, contractAddress, selector) {\n    console.warn(\"hw-app-eth: eth.setExternalPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`.\");\n    return setExternalPlugin(this.transport, pluginName, selector);\n  };\n\n  Eth.prototype.setPlugin = function (data) {\n    console.warn(\"hw-app-eth: eth.setPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`.\");\n    return setPlugin(this.transport, data);\n  };\n\n  return Eth;\n}();\n\nexport default Eth; // internal helpers\n\nfunction provideERC20TokenInformation(transport, data) {\n  return transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(function () {\n    return true;\n  }, function (e) {\n    if (e && e.statusCode === 0x6d00) {\n      // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n      // we return a flag to know if the call was effective or not\n      return false;\n    }\n\n    throw e;\n  });\n}\n\nfunction provideNFTInformation(transport, data) {\n  return transport.send(0xe0, 0x14, 0x00, 0x00, data).then(function () {\n    return true;\n  }, function (e) {\n    if (e && e.statusCode === 0x6d00) {\n      // older version of ETH app => error because we don't allow blind sign when NFT is explicitly requested to be resolved.\n      throw new EthAppNftNotSupported();\n    }\n\n    throw e;\n  });\n}\n\nfunction setExternalPlugin(transport, payload, signature) {\n  var payloadBuffer = Buffer.from(payload, \"hex\");\n  var signatureBuffer = Buffer.from(signature, \"hex\");\n  var buffer = Buffer.concat([payloadBuffer, signatureBuffer]);\n  return transport.send(0xe0, 0x12, 0x00, 0x00, buffer).then(function () {\n    return true;\n  }, function (e) {\n    if (e && e.statusCode === 0x6a80) {\n      // this case happen when the plugin name is too short or too long\n      return false;\n    } else if (e && e.statusCode === 0x6984) {\n      // this case happen when the plugin requested is not installed on the device\n      return false;\n    } else if (e && e.statusCode === 0x6d00) {\n      // this case happen for older version of ETH app\n      return false;\n    }\n\n    throw e;\n  });\n}\n\nfunction setPlugin(transport, data) {\n  var buffer = Buffer.from(data, \"hex\");\n  return transport.send(0xe0, 0x16, 0x00, 0x00, buffer).then(function () {\n    return true;\n  }, function (e) {\n    if (e && e.statusCode === 0x6a80) {\n      // this case happen when the plugin name is too short or too long\n      return false;\n    } else if (e && e.statusCode === 0x6984) {\n      // this case happen when the plugin requested is not installed on the device\n      return false;\n    } else if (e && e.statusCode === 0x6d00) {\n      // this case happen for older version of ETH app\n      return false;\n    }\n\n    throw e;\n  });\n}","map":{"version":3,"sources":["../src/Eth.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { decodeTxInfo } from \"./utils\";\nimport ledgerService from \"./services/ledger\";\nimport { EthAppNftNotSupported, EthAppPleaseEnableContractData, } from \"./errors\";\nvar starkQuantizationTypeMap = {\n    eth: 1,\n    erc20: 2,\n    erc721: 3,\n    erc20mintable: 4,\n    erc721mintable: 5\n};\nfunction splitPath(path) {\n    var result = [];\n    var components = path.split(\"/\");\n    components.forEach(function (element) {\n        var number = parseInt(element, 10);\n        if (isNaN(number)) {\n            return; // FIXME shouldn't it throws instead?\n        }\n        if (element.length > 1 && element[element.length - 1] === \"'\") {\n            number += 0x80000000;\n        }\n        result.push(number);\n    });\n    return result;\n}\nfunction hexBuffer(str) {\n    return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\nfunction maybeHexBuffer(str) {\n    if (!str)\n        return null;\n    return hexBuffer(str);\n}\nvar remapTransactionRelatedErrors = function (e) {\n    if (e && e.statusCode === 0x6a80) {\n        return new EthAppPleaseEnableContractData(\"Please enable Blind signing or Contract data in the Ethereum app Settings\");\n    }\n    return e;\n};\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\nvar Eth = /** @class */ (function () {\n    function Eth(transport, scrambleKey, loadConfig) {\n        if (scrambleKey === void 0) { scrambleKey = \"w0w\"; }\n        if (loadConfig === void 0) { loadConfig = {}; }\n        this.transport = transport;\n        this.loadConfig = loadConfig;\n        transport.decorateAppAPIMethods(this, [\n            \"getAddress\",\n            \"provideERC20TokenInformation\",\n            \"signTransaction\",\n            \"signPersonalMessage\",\n            \"getAppConfiguration\",\n            \"signEIP712HashedMessage\",\n            \"starkGetPublicKey\",\n            \"starkSignOrder\",\n            \"starkSignOrder_v2\",\n            \"starkSignTransfer\",\n            \"starkSignTransfer_v2\",\n            \"starkProvideQuantum\",\n            \"starkProvideQuantum_v2\",\n            \"starkUnsafeSign\",\n            \"eth2GetPublicKey\",\n            \"eth2SetWithdrawalIndex\",\n            \"setExternalPlugin\",\n            \"setPlugin\",\n            \"getEIP1024PublicEncryptionKey\",\n            \"getEIP1024SharedSecret\",\n        ], scrambleKey);\n    }\n    Eth.prototype.setLoadConfig = function (loadConfig) {\n        this.loadConfig = loadConfig;\n    };\n    /**\n     * get Ethereum address for a given BIP 32 path.\n     * @param path a path in BIP 32 format\n     * @option boolDisplay optionally enable or not the display\n     * @option boolChaincode optionally enable or not the chaincode request\n     * @return an object with a publicKey, address and (optionally) chainCode\n     * @example\n     * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n     */\n    Eth.prototype.getAddress = function (path, boolDisplay, boolChaincode) {\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 + paths.length * 4);\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        return this.transport\n            .send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer)\n            .then(function (response) {\n            var publicKeyLength = response[0];\n            var addressLength = response[1 + publicKeyLength];\n            return {\n                publicKey: response.slice(1, 1 + publicKeyLength).toString(\"hex\"),\n                address: \"0x\" +\n                    response\n                        .slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength)\n                        .toString(\"ascii\"),\n                chainCode: boolChaincode\n                    ? response\n                        .slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32)\n                        .toString(\"hex\")\n                    : undefined\n            };\n        });\n    };\n    /**\n     * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign.\n     *\n     * @param path: the BIP32 path to sign the transaction on\n     * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign\n     * @param resolution: resolution is an object with all \"resolved\" metadata necessary to allow the device to clear sign information. This includes: ERC20 token information, plugins, contracts, NFT signatures,... You must explicitly provide something to avoid having a warning. By default, you can use Ledger's service or your own resolution service. See services/types.js for the contract. Setting the value to \"null\" will fallback everything to blind signing but will still allow the device to sign the transaction.\n     * @example\n     import ledgerService from \"@ledgerhq/hw-app-eth/lib/services/ledger\"\n     const tx = \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\"; // raw tx to sign\n     const resolution = await ledgerService.resolveTransaction(tx);\n     const result = eth.signTransaction(\"44'/60'/0'/0/0\", tx, resolution);\n     console.log(result);\n     */\n    Eth.prototype.signTransaction = function (path, rawTxHex, resolution) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, plugin, e_1_1, _c, _d, _e, payload, signature, e_2_1, _f, _g, nft, e_3_1, _h, _j, data, e_4_1, rawTx, _k, vrsOffset, txType, chainId, chainIdTruncated, paths, response, offset, _loop_1, this_1, response_byte, v, oneByteChainId, ecc_parity, r, s;\n            var e_1, _l, e_2, _m, e_3, _o, e_4, _p;\n            return __generator(this, function (_q) {\n                switch (_q.label) {\n                    case 0:\n                        if (!(resolution === undefined)) return [3 /*break*/, 2];\n                        console.warn(\"hw-app-eth: signTransaction(path, rawTxHex, resolution): \" +\n                            \"please provide the 'resolution' parameter. \" +\n                            \"See https://github.com/LedgerHQ/ledgerjs/blob/master/packages/hw-app-eth/README.md \" +\n                            \"â€“ the previous signature is deprecated and providing the 3rd 'resolution' parameter explicitly will become mandatory so you have the control on the resolution and the fallback mecanism (e.g. fallback to blind signing or not).\" +\n                            \"// Possible solution:\\n\" +\n                            \" + import ledgerService from '@ledgerhq/hw-app-eth/lib/services/ledger';\\n\" +\n                            \" + const resolution = await ledgerService.resolveTransaction(rawTxHex);\");\n                        return [4 /*yield*/, ledgerService\n                                .resolveTransaction(rawTxHex, this.loadConfig, {\n                                externalPlugins: true,\n                                erc20: true\n                            })[\"catch\"](function (e) {\n                                console.warn(\"an error occurred in resolveTransaction => fallback to blind signing: \" +\n                                    String(e));\n                                return null;\n                            })];\n                    case 1:\n                        resolution = _q.sent();\n                        _q.label = 2;\n                    case 2:\n                        if (!resolution) return [3 /*break*/, 31];\n                        _q.label = 3;\n                    case 3:\n                        _q.trys.push([3, 8, 9, 10]);\n                        _a = __values(resolution.plugin), _b = _a.next();\n                        _q.label = 4;\n                    case 4:\n                        if (!!_b.done) return [3 /*break*/, 7];\n                        plugin = _b.value;\n                        return [4 /*yield*/, setPlugin(this.transport, plugin)];\n                    case 5:\n                        _q.sent();\n                        _q.label = 6;\n                    case 6:\n                        _b = _a.next();\n                        return [3 /*break*/, 4];\n                    case 7: return [3 /*break*/, 10];\n                    case 8:\n                        e_1_1 = _q.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 10];\n                    case 9:\n                        try {\n                            if (_b && !_b.done && (_l = _a[\"return\"])) _l.call(_a);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                        return [7 /*endfinally*/];\n                    case 10:\n                        _q.trys.push([10, 15, 16, 17]);\n                        _c = __values(resolution.externalPlugin), _d = _c.next();\n                        _q.label = 11;\n                    case 11:\n                        if (!!_d.done) return [3 /*break*/, 14];\n                        _e = _d.value, payload = _e.payload, signature = _e.signature;\n                        return [4 /*yield*/, setExternalPlugin(this.transport, payload, signature)];\n                    case 12:\n                        _q.sent();\n                        _q.label = 13;\n                    case 13:\n                        _d = _c.next();\n                        return [3 /*break*/, 11];\n                    case 14: return [3 /*break*/, 17];\n                    case 15:\n                        e_2_1 = _q.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 17];\n                    case 16:\n                        try {\n                            if (_d && !_d.done && (_m = _c[\"return\"])) _m.call(_c);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                        return [7 /*endfinally*/];\n                    case 17:\n                        _q.trys.push([17, 22, 23, 24]);\n                        _f = __values(resolution.nfts), _g = _f.next();\n                        _q.label = 18;\n                    case 18:\n                        if (!!_g.done) return [3 /*break*/, 21];\n                        nft = _g.value;\n                        return [4 /*yield*/, provideNFTInformation(this.transport, Buffer.from(nft, \"hex\"))];\n                    case 19:\n                        _q.sent();\n                        _q.label = 20;\n                    case 20:\n                        _g = _f.next();\n                        return [3 /*break*/, 18];\n                    case 21: return [3 /*break*/, 24];\n                    case 22:\n                        e_3_1 = _q.sent();\n                        e_3 = { error: e_3_1 };\n                        return [3 /*break*/, 24];\n                    case 23:\n                        try {\n                            if (_g && !_g.done && (_o = _f[\"return\"])) _o.call(_f);\n                        }\n                        finally { if (e_3) throw e_3.error; }\n                        return [7 /*endfinally*/];\n                    case 24:\n                        _q.trys.push([24, 29, 30, 31]);\n                        _h = __values(resolution.erc20Tokens), _j = _h.next();\n                        _q.label = 25;\n                    case 25:\n                        if (!!_j.done) return [3 /*break*/, 28];\n                        data = _j.value;\n                        return [4 /*yield*/, provideERC20TokenInformation(this.transport, Buffer.from(data, \"hex\"))];\n                    case 26:\n                        _q.sent();\n                        _q.label = 27;\n                    case 27:\n                        _j = _h.next();\n                        return [3 /*break*/, 25];\n                    case 28: return [3 /*break*/, 31];\n                    case 29:\n                        e_4_1 = _q.sent();\n                        e_4 = { error: e_4_1 };\n                        return [3 /*break*/, 31];\n                    case 30:\n                        try {\n                            if (_j && !_j.done && (_p = _h[\"return\"])) _p.call(_h);\n                        }\n                        finally { if (e_4) throw e_4.error; }\n                        return [7 /*endfinally*/];\n                    case 31:\n                        rawTx = Buffer.from(rawTxHex, \"hex\");\n                        _k = decodeTxInfo(rawTx), vrsOffset = _k.vrsOffset, txType = _k.txType, chainId = _k.chainId, chainIdTruncated = _k.chainIdTruncated;\n                        paths = splitPath(path);\n                        offset = 0;\n                        _loop_1 = function () {\n                            var first, maxChunkSize, chunkSize, buffer;\n                            return __generator(this, function (_r) {\n                                switch (_r.label) {\n                                    case 0:\n                                        first = offset === 0;\n                                        maxChunkSize = first ? 150 - 1 - paths.length * 4 : 150;\n                                        chunkSize = offset + maxChunkSize > rawTx.length\n                                            ? rawTx.length - offset\n                                            : maxChunkSize;\n                                        if (vrsOffset != 0 && offset + chunkSize >= vrsOffset) {\n                                            // Make sure that the chunk doesn't end right on the EIP 155 marker if set\n                                            chunkSize = rawTx.length - offset;\n                                        }\n                                        buffer = Buffer.alloc(first ? 1 + paths.length * 4 + chunkSize : chunkSize);\n                                        if (first) {\n                                            buffer[0] = paths.length;\n                                            paths.forEach(function (element, index) {\n                                                buffer.writeUInt32BE(element, 1 + 4 * index);\n                                            });\n                                            rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n                                        }\n                                        else {\n                                            rawTx.copy(buffer, 0, offset, offset + chunkSize);\n                                        }\n                                        return [4 /*yield*/, this_1.transport\n                                                .send(0xe0, 0x04, first ? 0x00 : 0x80, 0x00, buffer)[\"catch\"](function (e) {\n                                                throw remapTransactionRelatedErrors(e);\n                                            })];\n                                    case 1:\n                                        response = _r.sent();\n                                        offset += chunkSize;\n                                        return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _q.label = 32;\n                    case 32:\n                        if (!(offset !== rawTx.length)) return [3 /*break*/, 34];\n                        return [5 /*yield**/, _loop_1()];\n                    case 33:\n                        _q.sent();\n                        return [3 /*break*/, 32];\n                    case 34:\n                        response_byte = response[0];\n                        v = \"\";\n                        if (chainId.times(2).plus(35).plus(1).isGreaterThan(255)) {\n                            oneByteChainId = (chainIdTruncated * 2 + 35) % 256;\n                            ecc_parity = Math.abs(response_byte - oneByteChainId);\n                            if (txType != null) {\n                                // For EIP2930 and EIP1559 tx, v is simply the parity.\n                                v = ecc_parity % 2 == 1 ? \"00\" : \"01\";\n                            }\n                            else {\n                                // Legacy type transaction with a big chain ID\n                                v = chainId.times(2).plus(35).plus(ecc_parity).toString(16);\n                            }\n                        }\n                        else {\n                            v = response_byte.toString(16);\n                        }\n                        // Make sure v has is prefixed with a 0 if its length is odd (\"1\" -> \"01\").\n                        if (v.length % 2 == 1) {\n                            v = \"0\" + v;\n                        }\n                        r = response.slice(1, 1 + 32).toString(\"hex\");\n                        s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n                        return [2 /*return*/, { v: v, r: r, s: s }];\n                }\n            });\n        });\n    };\n    /**\n     */\n    Eth.prototype.getAppConfiguration = function () {\n        return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(function (response) {\n            return {\n                arbitraryDataEnabled: response[0] & 0x01,\n                erc20ProvisioningNecessary: response[0] & 0x02,\n                starkEnabled: response[0] & 0x04,\n                starkv2Supported: response[0] & 0x08,\n                version: \"\" + response[1] + \".\" + response[2] + \".\" + response[3]\n            };\n        });\n    };\n    /**\n    * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n    * @example\n    eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n    var v = result['v'] - 27;\n    v = v.toString(16);\n    if (v.length < 2) {\n      v = \"0\" + v;\n    }\n    console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n    })\n     */\n    Eth.prototype.signPersonalMessage = function (path, messageHex) {\n        return __awaiter(this, void 0, void 0, function () {\n            var paths, offset, message, response, _loop_2, this_2, v, r, s;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        paths = splitPath(path);\n                        offset = 0;\n                        message = Buffer.from(messageHex, \"hex\");\n                        _loop_2 = function () {\n                            var maxChunkSize, chunkSize, buffer;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n                                        chunkSize = offset + maxChunkSize > message.length\n                                            ? message.length - offset\n                                            : maxChunkSize;\n                                        buffer = Buffer.alloc(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);\n                                        if (offset === 0) {\n                                            buffer[0] = paths.length;\n                                            paths.forEach(function (element, index) {\n                                                buffer.writeUInt32BE(element, 1 + 4 * index);\n                                            });\n                                            buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n                                            message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);\n                                        }\n                                        else {\n                                            message.copy(buffer, 0, offset, offset + chunkSize);\n                                        }\n                                        return [4 /*yield*/, this_2.transport.send(0xe0, 0x08, offset === 0 ? 0x00 : 0x80, 0x00, buffer)];\n                                    case 1:\n                                        response = _b.sent();\n                                        offset += chunkSize;\n                                        return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_2 = this;\n                        _a.label = 1;\n                    case 1:\n                        if (!(offset !== message.length)) return [3 /*break*/, 3];\n                        return [5 /*yield**/, _loop_2()];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 1];\n                    case 3:\n                        v = response[0];\n                        r = response.slice(1, 1 + 32).toString(\"hex\");\n                        s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n                        return [2 /*return*/, { v: v, r: r, s: s }];\n                }\n            });\n        });\n    };\n    /**\n    * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n    * @example\n    eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n    var v = result['v'] - 27;\n    v = v.toString(16);\n    if (v.length < 2) {\n      v = \"0\" + v;\n    }\n    console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n    })\n     */\n    Eth.prototype.signEIP712HashedMessage = function (path, domainSeparatorHex, hashStructMessageHex) {\n        var domainSeparator = hexBuffer(domainSeparatorHex);\n        var hashStruct = hexBuffer(hashStructMessageHex);\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);\n        var offset = 0;\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        offset = 1 + 4 * paths.length;\n        domainSeparator.copy(buffer, offset);\n        offset += 32;\n        hashStruct.copy(buffer, offset);\n        return this.transport\n            .send(0xe0, 0x0c, 0x00, 0x00, buffer)\n            .then(function (response) {\n            var v = response[0];\n            var r = response.slice(1, 1 + 32).toString(\"hex\");\n            var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n            return {\n                v: v,\n                r: r,\n                s: s\n            };\n        });\n    };\n    /**\n     * get Stark public key for a given BIP 32 path.\n     * @param path a path in BIP 32 format\n     * @option boolDisplay optionally enable or not the display\n     * @return the Stark public key\n     */\n    Eth.prototype.starkGetPublicKey = function (path, boolDisplay) {\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 + paths.length * 4);\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        return this.transport\n            .send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n            .then(function (response) {\n            return response.slice(0, response.length - 2);\n        });\n    };\n    /**\n     * sign a Stark order\n     * @param path a path in BIP 32 format\n     * @option sourceTokenAddress contract address of the source token (not present for ETH)\n     * @param sourceQuantization quantization used for the source token\n     * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n     * @param destinationQuantization quantization used for the destination token\n     * @param sourceVault ID of the source vault\n     * @param destinationVault ID of the destination vault\n     * @param amountSell amount to sell\n     * @param amountBuy amount to buy\n     * @param nonce transaction nonce\n     * @param timestamp transaction validity timestamp\n     * @return the signature\n     */\n    Eth.prototype.starkSignOrder = function (path, sourceTokenAddress, sourceQuantization, destinationTokenAddress, destinationQuantization, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n        var sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n        var destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4, 0);\n        var offset = 0;\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        offset = 1 + 4 * paths.length;\n        if (sourceTokenAddressHex) {\n            sourceTokenAddressHex.copy(buffer, offset);\n        }\n        offset += 20;\n        Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        offset += 32;\n        if (destinationTokenAddressHex) {\n            destinationTokenAddressHex.copy(buffer, offset);\n        }\n        offset += 20;\n        Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        offset += 32;\n        buffer.writeUInt32BE(sourceVault, offset);\n        offset += 4;\n        buffer.writeUInt32BE(destinationVault, offset);\n        offset += 4;\n        Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n        offset += 8;\n        Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n        offset += 8;\n        buffer.writeUInt32BE(nonce, offset);\n        offset += 4;\n        buffer.writeUInt32BE(timestamp, offset);\n        return this.transport\n            .send(0xf0, 0x04, 0x01, 0x00, buffer)\n            .then(function (response) {\n            var r = response.slice(1, 1 + 32).toString(\"hex\");\n            var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n            return {\n                r: r,\n                s: s\n            };\n        });\n    };\n    /**\n     * sign a Stark order using the Starkex V2 protocol\n     * @param path a path in BIP 32 format\n     * @option sourceTokenAddress contract address of the source token (not present for ETH)\n     * @param sourceQuantizationType quantization type used for the source token\n     * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)\n     * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token\n     * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n     * @param destinationQuantizationType quantization type used for the destination token\n     * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)\n     * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token\n     * @param sourceVault ID of the source vault\n     * @param destinationVault ID of the destination vault\n     * @param amountSell amount to sell\n     * @param amountBuy amount to buy\n     * @param nonce transaction nonce\n     * @param timestamp transaction validity timestamp\n     * @return the signature\n     */\n    Eth.prototype.starkSignOrder_v2 = function (path, sourceTokenAddress, sourceQuantizationType, sourceQuantization, sourceMintableBlobOrTokenId, destinationTokenAddress, destinationQuantizationType, destinationQuantization, destinationMintableBlobOrTokenId, sourceVault, destinationVault, amountSell, amountBuy, nonce, timestamp) {\n        var sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n        var destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n        if (!(sourceQuantizationType in starkQuantizationTypeMap)) {\n            throw new Error(\"eth.starkSignOrderv2 invalid source quantization type=\" +\n                sourceQuantizationType);\n        }\n        if (!(destinationQuantizationType in starkQuantizationTypeMap)) {\n            throw new Error(\"eth.starkSignOrderv2 invalid destination quantization type=\" +\n                destinationQuantizationType);\n        }\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 +\n            paths.length * 4 +\n            1 +\n            20 +\n            32 +\n            32 +\n            1 +\n            20 +\n            32 +\n            32 +\n            4 +\n            4 +\n            8 +\n            8 +\n            4 +\n            4, 0);\n        var offset = 0;\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        offset = 1 + 4 * paths.length;\n        buffer[offset] = starkQuantizationTypeMap[sourceQuantizationType];\n        offset++;\n        if (sourceTokenAddressHex) {\n            sourceTokenAddressHex.copy(buffer, offset);\n        }\n        offset += 20;\n        if (sourceQuantization) {\n            Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        }\n        offset += 32;\n        if (sourceMintableBlobOrTokenId) {\n            Buffer.from(sourceMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        }\n        offset += 32;\n        buffer[offset] = starkQuantizationTypeMap[destinationQuantizationType];\n        offset++;\n        if (destinationTokenAddressHex) {\n            destinationTokenAddressHex.copy(buffer, offset);\n        }\n        offset += 20;\n        if (destinationQuantization) {\n            Buffer.from(destinationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        }\n        offset += 32;\n        if (destinationMintableBlobOrTokenId) {\n            Buffer.from(destinationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        }\n        offset += 32;\n        buffer.writeUInt32BE(sourceVault, offset);\n        offset += 4;\n        buffer.writeUInt32BE(destinationVault, offset);\n        offset += 4;\n        Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n        offset += 8;\n        Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n        offset += 8;\n        buffer.writeUInt32BE(nonce, offset);\n        offset += 4;\n        buffer.writeUInt32BE(timestamp, offset);\n        return this.transport\n            .send(0xf0, 0x04, 0x03, 0x00, buffer)\n            .then(function (response) {\n            var r = response.slice(1, 1 + 32).toString(\"hex\");\n            var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n            return {\n                r: r,\n                s: s\n            };\n        });\n    };\n    /**\n     * sign a Stark transfer\n     * @param path a path in BIP 32 format\n     * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n     * @param transferQuantization quantization used for the token to be transferred\n     * @param targetPublicKey target Stark public key\n     * @param sourceVault ID of the source vault\n     * @param destinationVault ID of the destination vault\n     * @param amountTransfer amount to transfer\n     * @param nonce transaction nonce\n     * @param timestamp transaction validity timestamp\n     * @return the signature\n     */\n    Eth.prototype.starkSignTransfer = function (path, transferTokenAddress, transferQuantization, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp) {\n        var transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n        var targetPublicKeyHex = hexBuffer(targetPublicKey);\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4, 0);\n        var offset = 0;\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        offset = 1 + 4 * paths.length;\n        if (transferTokenAddressHex) {\n            transferTokenAddressHex.copy(buffer, offset);\n        }\n        offset += 20;\n        Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        offset += 32;\n        targetPublicKeyHex.copy(buffer, offset);\n        offset += 32;\n        buffer.writeUInt32BE(sourceVault, offset);\n        offset += 4;\n        buffer.writeUInt32BE(destinationVault, offset);\n        offset += 4;\n        Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n        offset += 8;\n        buffer.writeUInt32BE(nonce, offset);\n        offset += 4;\n        buffer.writeUInt32BE(timestamp, offset);\n        return this.transport\n            .send(0xf0, 0x04, 0x02, 0x00, buffer)\n            .then(function (response) {\n            var r = response.slice(1, 1 + 32).toString(\"hex\");\n            var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n            return {\n                r: r,\n                s: s\n            };\n        });\n    };\n    /**\n     * sign a Stark transfer or conditional transfer using the Starkex V2 protocol\n     * @param path a path in BIP 32 format\n     * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n     * @param transferQuantizationType quantization type used for the token to be transferred\n     * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n     * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred\n     * @param targetPublicKey target Stark public key\n     * @param sourceVault ID of the source vault\n     * @param destinationVault ID of the destination vault\n     * @param amountTransfer amount to transfer\n     * @param nonce transaction nonce\n     * @param timestamp transaction validity timestamp\n     * @option conditionalTransferAddress onchain address of the condition for a conditional transfer\n     * @option conditionalTransferFact fact associated to the condition for a conditional transfer\n     * @return the signature\n     */\n    Eth.prototype.starkSignTransfer_v2 = function (path, transferTokenAddress, transferQuantizationType, transferQuantization, transferMintableBlobOrTokenId, targetPublicKey, sourceVault, destinationVault, amountTransfer, nonce, timestamp, conditionalTransferAddress, conditionalTransferFact) {\n        var transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n        var targetPublicKeyHex = hexBuffer(targetPublicKey);\n        var conditionalTransferAddressHex = maybeHexBuffer(conditionalTransferAddress);\n        if (!(transferQuantizationType in starkQuantizationTypeMap)) {\n            throw new Error(\"eth.starkSignTransferv2 invalid quantization type=\" +\n                transferQuantizationType);\n        }\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 +\n            paths.length * 4 +\n            1 +\n            20 +\n            32 +\n            32 +\n            32 +\n            4 +\n            4 +\n            8 +\n            4 +\n            4 +\n            (conditionalTransferAddressHex ? 32 + 20 : 0), 0);\n        var offset = 0;\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        offset = 1 + 4 * paths.length;\n        buffer[offset] = starkQuantizationTypeMap[transferQuantizationType];\n        offset++;\n        if (transferTokenAddressHex) {\n            transferTokenAddressHex.copy(buffer, offset);\n        }\n        offset += 20;\n        if (transferQuantization) {\n            Buffer.from(transferQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        }\n        offset += 32;\n        if (transferMintableBlobOrTokenId) {\n            Buffer.from(transferMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        }\n        offset += 32;\n        targetPublicKeyHex.copy(buffer, offset);\n        offset += 32;\n        buffer.writeUInt32BE(sourceVault, offset);\n        offset += 4;\n        buffer.writeUInt32BE(destinationVault, offset);\n        offset += 4;\n        Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(buffer, offset);\n        offset += 8;\n        buffer.writeUInt32BE(nonce, offset);\n        offset += 4;\n        buffer.writeUInt32BE(timestamp, offset);\n        if (conditionalTransferAddressHex && conditionalTransferFact) {\n            offset += 4;\n            Buffer.from(conditionalTransferFact.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n            offset += 32;\n            conditionalTransferAddressHex.copy(buffer, offset);\n        }\n        return this.transport\n            .send(0xf0, 0x04, conditionalTransferAddressHex ? 0x05 : 0x04, 0x00, buffer)\n            .then(function (response) {\n            var r = response.slice(1, 1 + 32).toString(\"hex\");\n            var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n            return {\n                r: r,\n                s: s\n            };\n        });\n    };\n    /**\n     * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n     *\n     * It shall be run following a provideERC20TokenInformation call for the given contract\n     *\n     * @param operationContract contract address of the token to be transferred (not present for ETH)\n     * @param operationQuantization quantization used for the token to be transferred\n     */\n    Eth.prototype.starkProvideQuantum = function (operationContract, operationQuantization) {\n        var operationContractHex = maybeHexBuffer(operationContract);\n        var buffer = Buffer.alloc(20 + 32, 0);\n        if (operationContractHex) {\n            operationContractHex.copy(buffer, 0);\n        }\n        Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, 20);\n        return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(function () { return true; }, function (e) {\n            if (e && e.statusCode === 0x6d00) {\n                // this case happen for ETH application versions not supporting Stark extensions\n                return false;\n            }\n            throw e;\n        });\n    };\n    /**\n     * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol\n     *\n     * It shall be run following a provideERC20TokenInformation call for the given contract\n     *\n     * @param operationContract contract address of the token to be transferred (not present for ETH)\n     * @param operationQuantizationType quantization type of the token to be transferred\n     * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n     * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred\n     */\n    Eth.prototype.starkProvideQuantum_v2 = function (operationContract, operationQuantizationType, operationQuantization, operationMintableBlobOrTokenId) {\n        var operationContractHex = maybeHexBuffer(operationContract);\n        if (!(operationQuantizationType in starkQuantizationTypeMap)) {\n            throw new Error(\"eth.starkProvideQuantumV2 invalid quantization type=\" +\n                operationQuantizationType);\n        }\n        var buffer = Buffer.alloc(20 + 32 + 32, 0);\n        var offset = 0;\n        if (operationContractHex) {\n            operationContractHex.copy(buffer, offset);\n        }\n        offset += 20;\n        if (operationQuantization) {\n            Buffer.from(operationQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        }\n        offset += 32;\n        if (operationMintableBlobOrTokenId) {\n            Buffer.from(operationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"), \"hex\").copy(buffer, offset);\n        }\n        return this.transport\n            .send(0xf0, 0x08, starkQuantizationTypeMap[operationQuantizationType], 0x00, buffer)\n            .then(function () { return true; }, function (e) {\n            if (e && e.statusCode === 0x6d00) {\n                // this case happen for ETH application versions not supporting Stark extensions\n                return false;\n            }\n            throw e;\n        });\n    };\n    /**\n     * sign the given hash over the Stark curve\n     * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.\n     * @param path a path in BIP 32 format\n     * @param hash hexadecimal hash to sign\n     * @return the signature\n     */\n    Eth.prototype.starkUnsafeSign = function (path, hash) {\n        var hashHex = hexBuffer(hash);\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n        var offset = 0;\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        offset = 1 + 4 * paths.length;\n        hashHex.copy(buffer, offset);\n        return this.transport\n            .send(0xf0, 0x0a, 0x00, 0x00, buffer)\n            .then(function (response) {\n            var r = response.slice(1, 1 + 32).toString(\"hex\");\n            var s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n            return {\n                r: r,\n                s: s\n            };\n        });\n    };\n    /**\n     * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.\n     * @param path a path in BIP 32 format\n     * @option boolDisplay optionally enable or not the display\n     * @return an object with a publicKey\n     * @example\n     * eth.eth2GetPublicKey(\"12381/3600/0/0\").then(o => o.publicKey)\n     */\n    Eth.prototype.eth2GetPublicKey = function (path, boolDisplay) {\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 + paths.length * 4);\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        return this.transport\n            .send(0xe0, 0x0e, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n            .then(function (response) {\n            return {\n                publicKey: response.slice(0, -2).toString(\"hex\")\n            };\n        });\n    };\n    /**\n     * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature\n     *\n     * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0\n     *\n     * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0\n     * @return True if the method was executed successfully\n     */\n    Eth.prototype.eth2SetWithdrawalIndex = function (withdrawalIndex) {\n        var buffer = Buffer.alloc(4, 0);\n        buffer.writeUInt32BE(withdrawalIndex, 0);\n        return this.transport.send(0xe0, 0x10, 0x00, 0x00, buffer).then(function () { return true; }, function (e) {\n            if (e && e.statusCode === 0x6d00) {\n                // this case happen for ETH application versions not supporting ETH 2\n                return false;\n            }\n            throw e;\n        });\n    };\n    /**\n     * get a public encryption key on Curve25519 according to EIP 1024\n     * @param path a path in BIP 32 format\n     * @option boolDisplay optionally enable or not the display\n     * @return an object with a publicKey\n     * @example\n     * eth.getEIP1024PublicEncryptionKey(\"44'/60'/0'/0/0\").then(o => o.publicKey)\n     */\n    Eth.prototype.getEIP1024PublicEncryptionKey = function (path, boolDisplay) {\n        var paths = splitPath(path);\n        var buffer = Buffer.alloc(1 + paths.length * 4);\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        return this.transport\n            .send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n            .then(function (response) {\n            return {\n                publicKey: response.slice(0, -2).toString(\"hex\")\n            };\n        });\n    };\n    /**\n     * get a shared secret on Curve25519 according to EIP 1024\n     * @param path a path in BIP 32 format\n     * @param remotePublicKeyHex remote Curve25519 public key\n     * @option boolDisplay optionally enable or not the display\n     * @return an object with a shared secret\n     * @example\n     * eth.getEIP1024SharedSecret(\"44'/60'/0'/0/0\", \"87020e80af6e07a6e4697f091eacadb9e7e6629cb7e5a8a371689a3ed53b3d64\").then(o => o.sharedSecret)\n     */\n    Eth.prototype.getEIP1024SharedSecret = function (path, remotePublicKeyHex, boolDisplay) {\n        var paths = splitPath(path);\n        var remotePublicKey = hexBuffer(remotePublicKeyHex);\n        var buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n        var offset = 0;\n        buffer[0] = paths.length;\n        paths.forEach(function (element, index) {\n            buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        offset = 1 + 4 * paths.length;\n        remotePublicKey.copy(buffer, offset);\n        return this.transport\n            .send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x01, buffer)\n            .then(function (response) {\n            return {\n                sharedSecret: response.slice(0, -2).toString(\"hex\")\n            };\n        });\n    };\n    Eth.prototype.provideERC20TokenInformation = function (_a) {\n        var data = _a.data;\n        console.warn(\"hw-app-eth: eth.provideERC20TokenInformation is deprecated. signTransaction solves this for you when providing it in `resolution`.\");\n        return provideERC20TokenInformation(this.transport, data);\n    };\n    Eth.prototype.setExternalPlugin = function (pluginName, contractAddress, selector) {\n        console.warn(\"hw-app-eth: eth.setExternalPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`.\");\n        return setExternalPlugin(this.transport, pluginName, selector);\n    };\n    Eth.prototype.setPlugin = function (data) {\n        console.warn(\"hw-app-eth: eth.setPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`.\");\n        return setPlugin(this.transport, data);\n    };\n    return Eth;\n}());\nexport default Eth;\n// internal helpers\nfunction provideERC20TokenInformation(transport, data) {\n    return transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(function () { return true; }, function (e) {\n        if (e && e.statusCode === 0x6d00) {\n            // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n            // we return a flag to know if the call was effective or not\n            return false;\n        }\n        throw e;\n    });\n}\nfunction provideNFTInformation(transport, data) {\n    return transport.send(0xe0, 0x14, 0x00, 0x00, data).then(function () { return true; }, function (e) {\n        if (e && e.statusCode === 0x6d00) {\n            // older version of ETH app => error because we don't allow blind sign when NFT is explicitly requested to be resolved.\n            throw new EthAppNftNotSupported();\n        }\n        throw e;\n    });\n}\nfunction setExternalPlugin(transport, payload, signature) {\n    var payloadBuffer = Buffer.from(payload, \"hex\");\n    var signatureBuffer = Buffer.from(signature, \"hex\");\n    var buffer = Buffer.concat([payloadBuffer, signatureBuffer]);\n    return transport.send(0xe0, 0x12, 0x00, 0x00, buffer).then(function () { return true; }, function (e) {\n        if (e && e.statusCode === 0x6a80) {\n            // this case happen when the plugin name is too short or too long\n            return false;\n        }\n        else if (e && e.statusCode === 0x6984) {\n            // this case happen when the plugin requested is not installed on the device\n            return false;\n        }\n        else if (e && e.statusCode === 0x6d00) {\n            // this case happen for older version of ETH app\n            return false;\n        }\n        throw e;\n    });\n}\nfunction setPlugin(transport, data) {\n    var buffer = Buffer.from(data, \"hex\");\n    return transport.send(0xe0, 0x16, 0x00, 0x00, buffer).then(function () { return true; }, function (e) {\n        if (e && e.statusCode === 0x6a80) {\n            // this case happen when the plugin name is too short or too long\n            return false;\n        }\n        else if (e && e.statusCode === 0x6984) {\n            // this case happen when the plugin requested is not installed on the device\n            return false;\n        }\n        else if (e && e.statusCode === 0x6d00) {\n            // this case happen for older version of ETH app\n            return false;\n        }\n        throw e;\n    });\n}\n//# sourceMappingURL=Eth.js.map"]},"metadata":{},"sourceType":"module"}