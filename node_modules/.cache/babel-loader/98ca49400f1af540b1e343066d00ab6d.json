{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.STARKNET_TYPED_DATA_TYPE = exports.STARKNET_DOMAIN_TYPE = exports.STARKNET_TYPE = exports.isValidType = exports.ATOMIC_TYPES = void 0;\n\nvar superstruct_1 = require(\"superstruct\");\n\nexports.ATOMIC_TYPES = ['felt', 'felt*']; // Source: https://github.com/Mrtenz/eip-712/blob/master/src/eip-712.ts\n// and modified to support starknet types\n\n/**\n * Checks if a type is valid with the given `typedData`. The following types are valid:\n * - Atomic types: felt, felt*\n * - Reference types: struct type (e.g. SomeStruct)\n *\n * @param {Record<string, unknown>} types\n * @param {string} type\n * @return {boolean}\n */\n\nvar isValidType = function (types, type) {\n  if (exports.ATOMIC_TYPES.includes(type)) {\n    return true;\n  }\n\n  if (types[type]) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.isValidType = isValidType;\nvar TYPE = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Type', function (type, context) {\n  return (0, exports.isValidType)(context.branch[0].types, type);\n});\nexports.STARKNET_TYPE = (0, superstruct_1.object)({\n  name: (0, superstruct_1.string)(),\n  type: TYPE\n});\nexports.STARKNET_DOMAIN_TYPE = (0, superstruct_1.object)({\n  name: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n  version: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n  chainId: (0, superstruct_1.optional)((0, superstruct_1.union)([(0, superstruct_1.string)(), (0, superstruct_1.number)()]))\n});\nexports.STARKNET_TYPED_DATA_TYPE = (0, superstruct_1.object)({\n  types: (0, superstruct_1.intersection)([(0, superstruct_1.type)({\n    StarkNetDomain: (0, superstruct_1.array)(exports.STARKNET_TYPE)\n  }), (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.array)(exports.STARKNET_TYPE))]),\n  primaryType: (0, superstruct_1.string)(),\n  domain: exports.STARKNET_DOMAIN_TYPE,\n  message: (0, superstruct_1.object)()\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","STARKNET_TYPED_DATA_TYPE","STARKNET_DOMAIN_TYPE","STARKNET_TYPE","isValidType","ATOMIC_TYPES","superstruct_1","require","types","type","includes","TYPE","refine","string","context","branch","object","name","optional","version","chainId","union","number","intersection","StarkNetDomain","array","record","primaryType","domain","message"],"sources":["/Users/marijoradman/y22/miami6/miami-hackathon-starknet-p2e/node_modules/starknet/dist/utils/typedData/types.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.STARKNET_TYPED_DATA_TYPE = exports.STARKNET_DOMAIN_TYPE = exports.STARKNET_TYPE = exports.isValidType = exports.ATOMIC_TYPES = void 0;\nvar superstruct_1 = require(\"superstruct\");\nexports.ATOMIC_TYPES = ['felt', 'felt*'];\n// Source: https://github.com/Mrtenz/eip-712/blob/master/src/eip-712.ts\n// and modified to support starknet types\n/**\n * Checks if a type is valid with the given `typedData`. The following types are valid:\n * - Atomic types: felt, felt*\n * - Reference types: struct type (e.g. SomeStruct)\n *\n * @param {Record<string, unknown>} types\n * @param {string} type\n * @return {boolean}\n */\nvar isValidType = function (types, type) {\n    if (exports.ATOMIC_TYPES.includes(type)) {\n        return true;\n    }\n    if (types[type]) {\n        return true;\n    }\n    return false;\n};\nexports.isValidType = isValidType;\nvar TYPE = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Type', function (type, context) {\n    return (0, exports.isValidType)(context.branch[0].types, type);\n});\nexports.STARKNET_TYPE = (0, superstruct_1.object)({\n    name: (0, superstruct_1.string)(),\n    type: TYPE,\n});\nexports.STARKNET_DOMAIN_TYPE = (0, superstruct_1.object)({\n    name: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n    version: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n    chainId: (0, superstruct_1.optional)((0, superstruct_1.union)([(0, superstruct_1.string)(), (0, superstruct_1.number)()])),\n});\nexports.STARKNET_TYPED_DATA_TYPE = (0, superstruct_1.object)({\n    types: (0, superstruct_1.intersection)([\n        (0, superstruct_1.type)({ StarkNetDomain: (0, superstruct_1.array)(exports.STARKNET_TYPE) }),\n        (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.array)(exports.STARKNET_TYPE)),\n    ]),\n    primaryType: (0, superstruct_1.string)(),\n    domain: exports.STARKNET_DOMAIN_TYPE,\n    message: (0, superstruct_1.object)(),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}